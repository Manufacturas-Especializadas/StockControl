@page "/historial"

@using StockControl.Models;
@using StockControl.Services;

@inject HistorialServices services;

<PageTitle>Historial</PageTitle>

<NavMenu/>

<a href="/index" class="link-primary text-decoration-none pb-3 fw-bold">
    <i class="bi bi-arrow-left p-2">
        Volver atrás
    </i>
</a>

<div class="container mt-2 justify-content-center">
    <div class="text-center">
        <input type="number" placeholder="Shop Order" class="input-number" @bind="ShopOrder" />
        <input type="text" placeholder="Número de parte" class="input-text" @bind="PartNumber" />

        <button type="button" class="button-custom" @onclick="filter">Filtrar</button>
        <button type="button" class="button-custom-danger" @onclick="clean">Limpiar</button>
    </div>
</div>

<div class="table-responsive">
    <table class="styled-table">
        <thead>
            <tr>
                <th>Shop Order</th>
                <th>N.Parte</th>
                <th>Cantidad Total</th>
                <th>Fecha</th>
                <th>Aprobado</th>
            </tr>
        </thead>
        @if(historial != null)
        {
            @foreach(var item in historial)
            {
                <tr>
                    <td>@item.ShopOrderId</td>
                    <td>@item.PartNumber</td>
                    <td>@item.TotalQunatity</td>
                    <td>@item.Fecha.Value.ToShortDateString()</td>
                    <td>
                        <span class="circle @(item.OrderFulfilled ? "green blink" : "red blink-red")"></span>
                    </td>
                </tr>
            }
        }
    </table>
</div>

<PaginationM CurrentPage="currentPage"
             TotalPages="totalPages"
             SelectedPage="@SelectedPageAsync" />

@code {
    List<Registrohistorico> historial = new List<Registrohistorico>();

    private int currentPage = 1;
    private int totalPages;
    private int PageSize;

    private int? ShopOrder;
    private string PartNumber = string.Empty;

    bool FilterEmpty => string.IsNullOrEmpty(PartNumber) && !ShopOrder.HasValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        historial = await services.GetPagedHistorial(currentPage, 10);
        totalPages = await services.GetTotalPagesAsync(10);
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadData();
    }

    private async Task filter()
    {
        currentPage = 1;
        historial = await services.Filters(ShopOrder, PartNumber);
        totalPages = await services.GetTotalPagesAsync(PageSize);
    }

    private async Task clean()
    {
        ShopOrder = null;
        PartNumber = string.Empty;
        totalPages = await services.GetTotalPagesAsync(PageSize);
        await LoadData();
    }
}