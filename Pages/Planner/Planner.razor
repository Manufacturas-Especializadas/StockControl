@page "/planner"

@using StockControl.Services;
@using StockControl.Models;
@using System.Globalization;
@using System.Data;
@using CsvHelper;
@using CsvHelper.Configuration;
@using System.Diagnostics;

@inject PlannerServices services;
@inject NavigationManager nav;
@inject Microsoft.JSInterop.IJSRuntime JSRuntime;

<PageTitle>Planner</PageTitle>

<NavMenu/>


<h1 class="text-black-bold text-center">PLANNER</h1>

<a href="/" class="link-primary text-decoration-none pb-3 fw-bold">
    <i class="bi bi-arrow-left p-2">
        Volver atrás
    </i>
</a>

<Alert @ref="alertref" Color="Color.Success" Visible="showAlert" Dismisable="true">
    Archivo cargado correctamente
</Alert>

<Field>
    <FilePicker Upload="ImportCsvFile" ShowMode="FilePickerShowMode.List"/>
</Field>

<div class="container mt-3 ms-5 justify-content-center bg-white p-2 shadow-sm d-inline-block">
    <div class="text-center">
        <input type="number" placeholder="Shop Order" class="input-number" @bind="ShopOrder" />
        <input type="text" placeholder="Número de parte" class="input-text" @bind="PartNumber" />

        <button type="button" class="button-custom" @onclick="filter">
            Filtrar
        </button>
        <button type="button" class="button-custom-danger" @onclick="Clean">
            Limpiar
        </button>
    </div>
</div>

<div class="table-responsive">
    <table class="styled-table">
        <thead>
            <tr>
                <th>Orden de producción</th>
                <th>Número de parte</th>
                <th>Fecha de producción CARRIER</th>
                <th>Cantidad requerida</th>
            </tr>
        </thead>
        @if (plannerArchivos != null)
        {
            @foreach (var item in plannerArchivos)
            {
                <tr>
                    <td>@item.OrdenProduccion</td>
                    <td>@item.NumeroParte</td>
                    <td>@item.FechaProduccionCarrier.Value.ToShortDateString()</td>
                    <td>@item.Cantidad</td>
                </tr>
            }
        }
    </table>
</div>

<PaginationM CurrentPage="currentPage"
             TotalPages="totalPages"
             SelectedPage="@SelectedPageAsync" />

@code {
    StockControl.Models.Planner selectedPlanner = null;

    List<Models.Planner> planners = new();
    List<PlannerArchivo> plannerArchivos = new();

    Models.Planner planner = new();

    int idToDelete;
    private int currentPage = 1;
    private int totalPages;
    private int PageSize;
    private int? ShopOrder;
    private string PartNumber; 
    bool FilterEmpty => string.IsNullOrEmpty(PartNumber) && !ShopOrder.HasValue;
    bool showAlert = false;

    Modal modalRef;
    Alert alertref;
    DataTable dt = new();

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {

        await LoadData();

    }

    private async Task LoadData()
    {
        plannerArchivos = await services.GetPagedPlanners(currentPage, 15);
        totalPages = await services.GetTotalPagesAsync(15);
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadData();
    }

    private void ShowPlannerDetails(Models.Planner planner)
    {
        selectedPlanner = planner;
        modalRef.Show();
    }

    private async Task ImportCsvFile(FileUploadEventArgs e)
    {
        try
        {
            var fileStream = e.File.OpenReadStream();

            var ms = new MemoryStream();
            await fileStream.CopyToAsync(ms);
            fileStream.Close();
            ms.Position = 0;

            using(var reader = new StreamReader(ms))
            using(var csv = new CsvReader(reader, new CsvConfiguration(CultureInfo.InvariantCulture)))
            {
                csv.Read();
                csv.ReadHeader();

                foreach(var header in csv.HeaderRecord)
                {
                    dt.Columns.Add(header);
                }

                while(await csv.ReadAsync())
                {
                    var row = dt.NewRow();
                    for(int i = 0; i < csv.HeaderRecord.Length; i++)
                    {
                        row[i] = csv.GetField(i);
                    }
                    dt.Rows.Add(row);
                }

                await services.InsertDatabase(dt);
                await LoadData();
            }

            showAlert = true;
            StateHasChanged();
            await Task.Delay(3000);
        }
        catch(Exception ex)
        {
            Debug.WriteLine($"Error al importar el archivo: {ex.Message}");
        }
    }

    private async Task filter()
    {
        currentPage = 1;
        plannerArchivos = await services.Filter(ShopOrder, PartNumber);
        totalPages = await services.GetTotalPagesAsync(PageSize);
    }

    private async Task Clean()
    {
        ShopOrder = null;
        PartNumber = string.Empty;
        totalPages = await services.GetTotalPagesAsync(PageSize);
        await LoadData();
    }

    private Task CloseModal()
    {
        return modalRef.Hide();
    }

    private Task ShowModal()
    {
        return modalRef.Show();
    }
}