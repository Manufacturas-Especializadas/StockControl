@page "/shoporder"

@using StockControl.Services;
@using StockControl.Models;

@inject ShopOrderServices services;
@inject IJSRuntime js;
@inject NavigationManager nav;

<PageTitle>ShopOrder</PageTitle>




<h1 class="text-black-bold text-center">ShopOrder</h1>



@* <Alert @ref="notFoundAlertRef" Color="Color.Danger" Visible="@showNotFoundAlert" Dismisable="true">
    No se encontró la ShopOrder o la fecha no coincide
</Alert> *@

<div class="container">
    <div class="input-group mb-3">
        <input type="number" class="form-control-md p-1 rounded-2" placeholder="Ingresa la ShopOrder" @bind="shopOrder">
        <div class="input-group-append">
            <button class="btn btn-primary ms-2" type="button" @onclick="FindShopOrder">Buscar</button>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="table-responsive bg-white">
                <table class="table">
                    <thead>
                        <tr>
                            <th>ShopOrder</th>
                            <th>N.parte</th>
                            <th>Cantidad</th>
                            <th>Fecha</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in filteredPlanner)
                        {
                            <tr>
                                <td>@item.ShopOrder</td>
                                <td>@item.Codigo</td>
                                <td>@item.Cantidad</td>
                                <td>@item.Fecha.Value.ToShortDateString()</td>
                            </tr>
                            <tr>
                                <td>@item.ShopOrder</td>
                                <td>@item.Codigo2</td>
                                <td>@item.Cantidad</td>
                                <td>@item.Fecha.Value.ToShortDateString()</td>
                            </tr>
                            <tr>
                                <td>@item.ShopOrder</td>
                                <td>@item.Codigo3</td>
                                <td>@item.Cantidad</td>
                                <td>@item.Fecha.Value.ToShortDateString()</td>
                            </tr>
                            <tr>
                                <td>@item.ShopOrder</td>
                                <td>@item.Codigo4</td>
                                <td>@item.Cantidad</td>
                                <td>@item.Fecha.Value.ToShortDateString()</td>
                            </tr>
                            <tr>
                                <td>@item.ShopOrder</td>
                                <td>@item.Codigo5</td>
                                <td>@item.Cantidad</td>
                                <td>@item.Fecha.Value.ToShortDateString()</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="col-sm-6">
            <div class="table-responsive bg-white">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Número de Parte</th>
                            <th>Cantidad Total</th>
                            <th>Fecha</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in filteredPlanner)
                        {
                            <tr>
                                <td>@item.Codigo</td>
                                <td>@GetTotalQuantity(item.Codigo)</td>
                                <td>@item.Fecha.Value.ToShortDateString()</td>
                            </tr>
                            <tr>
                                <td>@item.Codigo2</td>
                                <td>@GetTotalQuantity(item.Codigo2)</td>
                                <td>@item.Fecha.Value.ToShortDateString()</td>
                            </tr>
                            <tr>
                                <td>@item.Codigo3</td>
                                <td>@GetTotalQuantity(item.Codigo3)</td>
                                <td>@item.Fecha.Value.ToShortDateString()</td>
                            </tr>
                            <tr>
                                <td>@item.Codigo4</td>
                                <td>@GetTotalQuantity(item.Codigo4)</td>
                                <td>@item.Fecha.Value.ToShortDateString()</td>
                            </tr>
                            <tr>
                                <td>@item.Codigo5</td>
                                <td>@GetTotalQuantity(item.Codigo5)</td>
                                <td>@item.Fecha.Value.ToShortDateString()</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@code {
    int shopOrder;

    List<Planner> planners = new List<Planner>();
    List<Salida> salidas = new List<Salida>();

    List<Planner> filteredPlanner = new List<Planner>();
    List<Salida> filteredSalidas = new List<Salida>();

    bool showPlanner;
    bool showPartNumer;
    bool showNotFoundAlert = false;
    bool showNotMatchedDatesAlert = false;

    Alert notFoundAlertRef;
    Alert notMatchingDatesAlertRef;

    protected override void OnInitialized()
    {
        planners = services.GetPlans();
        salidas = services.GetSalidaList();
        filteredPlanner = new List<Planner>();
        filteredSalidas = new List<Salida>();
    }

    private void FindShopOrder()
    {
        var plannerResult = planners.Where(p => p.ShopOrder == shopOrder).ToList();
        if (plannerResult.Any())
        {
            var ShopOrderDate = plannerResult.First().Fecha.Value.Date;
            var salidResult = services.GetPartNumberByDate(ShopOrderDate);

            if (salidResult.Any())
            {
                filteredPlanner = plannerResult;
                filteredSalidas = salidResult;
                showPlanner = false;
                showPartNumer = false;
            }
            else
            {
                FilterClean();
                ShowNotFoundAlert();
                NotShowMatchingDatesAlert();
            }
        }
        else
        {
            FilterClean();
            ShowNotFoundAlert();
            NotShowMatchingDatesAlert();
        }

        StateHasChanged();
    }

    private int GetTotalQuantity(string codigo)
    {
        return filteredSalidas.Where(s => s.Codigo == codigo).Sum(s => s.Conteo);
    }

    private void FilterClean()
    {
        filteredPlanner = new List<Planner>();
        filteredSalidas = new List<Salida>();
        showPlanner = true;
        showPartNumer = true;
    }

    private void ShowNotFoundAlert()
    {
        showNotFoundAlert = true;
        StateHasChanged();
        HideAlertAfterDelay(notFoundAlertRef);
    }

    private void NotShowMatchingDatesAlert()
    {
        showNotMatchedDatesAlert = true;
        StateHasChanged();
        HideAlertAfterDelay(notMatchingDatesAlertRef);
    }

    private async Task HideAlertAfterDelay(Alert alertRef)
    {
        await Task.Delay(5000);
        alertRef.Visible = false;
        StateHasChanged();
    }
}